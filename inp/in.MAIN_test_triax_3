# LAMMPS INPUT FILE PERFORMING A AXISYMMETRIC TRIAXIAL TEST ON SAMPLES OF 3D GRANULAR SYSTEMS
# file: in.MAIN_test_triax_3
# author: JBC @ NORTHWESTERN UNIVERSITY, 10/10/2019
#
# THIS IS A MAIN SCRIPT # ALL VARIABLES AND COMPUTES IN THIS SUBSCRIPT ARE GLOBAL AND GIVEN DEFAULT VALUES THAT CAN BE OVERWRITTEN LOCALLY IN THE MAIN SCRIPT
# THIS SCRIPT MUST ONLY BE CALLED ONE TIME
#
#
# INFO :
# - Triaxial tests are performed dynamically. The equilibrium is not checked during the test (and viscous damping on floaters is inactive ???)
#
# TODO:
# - THE REACHING TARGET PERSSURE PART OF THAT FILE WILL BE SHARED WITH ALL MAIN FILES THAT ARE NOT THE INITIAL ASSEMBLY, SHOULD WE GENERALIZE IT AND EXTERNALIZE IT ?
# - NEED SOMETHING SAFER FOR THE WALLS

####################
# ---- HEADER ---- #
####################

# ---- LOAD INITIAL SAMPLE ---- #

read_restart restart.sample_3

# ---- DEFINITION OF THE PARAMETERS ---- #
#
include in.DEF_init_particles_3
include in.DEF_init_material_3
include in.DEF_param_sample_3
include in.DEF_param_simulation_3
include in.DEF_param_BC_control_3
include in.DEF_param_equilibrium_3
include in.DEF_init_post_3

# ---- SETUP OF THE BOUNDARY CONDITIONS AND STRUCTURES ---- #

variable BC_XX_WALL equal false # Overwrite default, creates walls
variable BC_YY_WALL equal false # Overwrite default, creates walls
variable BC_ZZ_WALL equal false # Overwrite default, creates walls

variable READWALL equal true # determine wall coordinates (if wall) from file

include in.SET_structure_3
include in.SET_boundary_3
include in.SET_macro_properties_3

# ---- TIME INTEGRATION ---- #
if "${SPHERE}" then "fix time_integration_particles particles nve/sphere" &
elif "!${SPHERE}" "fix time_integration_clumps particles rigid/small molecule" "fix_modify time_integration_clumps bodyforces early # forces must be calculated early for per-clump damping to work" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"

include in.SET_conv_3

# ---- MATERIAL AND CONTACT LAW ---- #

pair_style	granular
pair_coeff * * hertz/material $E ${ncdc} ${nu} tangential mindlin_rescale NULL ${tcdr} $f # Contact law with friction

# ---- DAMPING ---- #

if "${SPHERE}" then &
"fix damp_particles_visct floaters viscous $(v_visc0particles*2*sqrt(v_msys*v_hertzstiff)) # Translational Global damping of particles" &
"fix damp_particles_viscr floaters viscous/sphere $(v_visc0particles*0.5*v_dsys^2*sqrt(2*v_msys*v_hertzstiff_rot/5)) # Rotational Global damping of particles" &
"fix damp_particles_Yade particles cundamp ${damp0particles} ${damp0particles} # Yade Translational and Rotational damping of particles" &
elif "!${SPHERE}" &
"fix damp_particles_visct floaters viscous/rigid time_integration_clumps $(v_visc0particles*2*sqrt(v_msys*v_hertzstiff)) $(v_visc0particles*0.5*v_dsys^2*sqrt(2*v_msys*v_hertzstiff_rot/5)) # Global damping of rigid particles" &
"fix damp_particles_Yade particles cundamp/rigid time_integration_clumps ${damp0particles} ${damp0particles} # Yade Translational and Rotational damping of particles" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"


##########################################################
# ---- ISOTROPIC COMPRESSION TO THE TARGET PRESSURE ---- #
##########################################################

include in.DEF_param_triaxial_3 # To obtain good confinement pressure

if "${BC_XX_WALL} && ${BC_YY_WALL} && ${BC_ZZ_WALL}" then &
"variable REMAP equal false # Final equilibration without remapping if walls" &
elif "!${BC_XX_WALL} && !${BC_YY_WALL} && !${BC_ZZ_WALL}" &
"variable REMAP equal true # Final equilibration with remapping if PBC" &
else &
"print 'Script Error: boundaries must either all be periodic or all have walls. Flags BC_AXIS_WALL were given $(v_BC_XX_WALL), $(v_BC_YY_WALL) and $(v_BC_ZZ_WALL)'" &
"quit"

variable P0 equal $(v_Pconfine) # Sets the reference pressure equal to the confining pressure
variable In0 equal 1e-4 # Overwrite the inertial number to smaller values for compression
variable SHEARRELAX equal false # No shear/tilt relax

include in.PRESET_BC_control_ISO_3 # preset oedometric conditions to target pressure
include in.START_BC_control_3 # Start Boundary controller
include in.PRESET_equilibrium_all_3 # Sets equilibrium conditions on all variables
include in.START_equilibrium_3 # Start equilibrium check

thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf
thermo ${Nthermo}
run ${Nmax} # Will be stopped at equilibrium

include in.STOP_BC_control_3
include in.STOP_equilibrium_3

##############################
# ---- TRIAXIAL TESTING ---- #
##############################

# ---- DEFINITION AND SETUP OF THE TRIAXIAL PARAMETERS AND GLOBAL PROPERTIES ---- #

include in.SET_triaxial_3

# ---- STRAIN-CONTROLLED AXIAL STRAIN RATE ---- #

variable In0 equal 1e-4 # Overwrite the inertial number to desired value for strain-controlled axial compression
variable Ntriaxial equal $(round(v_axialstrain/(v_ratemax*dt))) # Number of timesteps necessary to reach the final strain. ratemax cannot be decreased after that, otherwise the system will be limited in strain rate and not reach the final strain
variable Nthermotriax equal $(round(v_Ntriaxial*v_axialsave/v_axialstrain))
print "                                               THE TRIAXIAL TEST IS SET TO REQUIRE $(v_Ntriaxial) TIMESTEPS"

variable BC_vprev_factor equal 1.0 # pre-factor of the velocity carried over should be 1 (one) so that there is no need for a pressure differential to drive the boundary
#variable BC_gain equal 1e-2 # Gain pre-factor on stiffness in stress-controlled boundary

if "${COMPRESSION}" then "variable logstrain equal ln(ramp(0,-${axialstrain})+1)" &
elif "!${COMPRESSION}" "variable logstrain equal ln(ramp(0,${axialstrain})+1)" &
else "print 'Script Error: Triaxial test must be in compression or extension. Flag COMPRESSION was given $(v_COMPRESSION)'" "quit"

include in.PRESET_BC_control_TRIAX_3 # Preset triaxial
variable BC_ZZ_TARGET equal v_logstrain # Strain-controlled deformation in the z-direction


# ---- RUNNING OF THE TRIAXIAL TEST ---- #
dump 1 particles custom 5000 dump.co_triaxial_3.lammpstrj id x y z diameter

variable In0 equal 1e-3 # Overwrite the inertial number to larger values for stress-controlled transversal boundaries to accomodate confining pressure efficiently
velocity dummy set 0.0 0.0 0.0 # Stop boundaries

include in.START_BC_control_3 # Start imposing triaxial boundary conditions
thermo_style custom step v_pxx v_pyy v_pzz v_press v_qdev v_epsx v_epsy v_epsz v_epsv v_pf
thermo ${Nthermotriax}
run ${Ntriaxial} # Will be stopped at equilibrium
include in.STOP_BC_control_3



