# LAMMPS INPUT FILE PERFORMING A AXISYMMETRIC TRIAXIAL TEST ON SAMPLES OF 3D GRANULAR SYSTEMS
# file: in.MAIN_test_triax_3
# author: JBC @ NORTHWESTERN UNIVERSITY, (jibril.coulibaly@gmail.com)
#
# THIS IS A MAIN SCRIPT # ALL VARIABLES AND COMPUTES IN THIS SUBSCRIPT ARE GLOBAL AND GIVEN DEFAULT VALUES THAT CAN BE OVERWRITTEN LOCALLY IN THE MAIN SCRIPT
# THIS SCRIPT MUST ONLY BE CALLED ONE TIME
#
#
# INFO :
# - Triaxial tests are performed dynamically. The equilibrium is not checked during the test (and viscous damping on floaters is inactive ???)
#
# TODO:
# - THE REACHING TARGET PERSSURE PART OF THAT FILE WILL BE SHARED WITH ALL MAIN FILES THAT ARE NOT THE INITIAL ASSEMBLY, SHOULD WE GENERALIZE IT AND EXTERNALIZE IT ?
# - NEED SOMETHING SAFER FOR THE WALLS

####################
# ---- HEADER ---- #
####################

# ---- LOAD INITIAL SAMPLE ---- #

include in.DEF_init_IO
read_restart ${fname_read_restart}

# ---- DEFINITION OF THE PARAMETERS AND LAMMPS REQUIREMENTS ---- #

include in.DEF_param_triax_3
include in.DEF_init_particles_3
include in.DEF_init_material_3
include in.DEF_init_boundary_3
include in.DEF_param_simulation_3
include in.DEF_param_BC_control_3
include in.DEF_param_equilibrium_3
include in.DEF_init_post_3

# ---- SETUP OF THE BOUNDARY CONDITIONS AND STRUCTURES ---- #

variable READWALL equal true # Read wall coordinates from file. Hardcoded: walls (if any) always read as they existed previously when using a restarted script
include in.SET_structure_3
include in.SET_boundary_3
include in.SET_macro_properties_3

# ---- TIME INTEGRATION ---- #
if "${SPHERE}" then "fix time_integration_particles particles nve/sphere" &
elif "!${SPHERE}" "fix time_integration_clumps particles rigid/small molecule" "fix_modify time_integration_clumps bodyforces early # forces must be calculated early for per-clump damping to work" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"

include in.SET_conv_3

# ---- MATERIAL AND CONTACT LAW ---- #

pair_style	granular
pair_coeff * * hertz/material $E ${ncdc} ${nu} tangential mindlin_rescale NULL ${tcdr} $f # Contact law with friction

# ---- DAMPING ---- #

if "${SPHERE}" then &
"fix damp_particles_visct floaters viscous ${viscdamp_lin} # Translational Global damping of particles" &
"fix damp_particles_viscr floaters viscous/sphere ${viscdamp_rot} # Rotational Global damping of particles" &
"fix damp_particles_Yade particles cundamp ${cundamp0} ${cundamp0} # Yade Translational and Rotational damping of particles" &
elif "!${SPHERE}" &
"fix damp_particles_visct floaters viscous/rigid time_integration_clumps ${viscdamp_lin} ${viscdamp_rot} # Global damping of rigid particles" &
"fix damp_particles_Yade particles cundamp/rigid time_integration_clumps ${cundamp0} ${cundamp0} # Yade Translational and Rotational damping of particles" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"


#########################################################
# ---- ISOTROPIC COMPRESSION TO CONFINING PRESSURE ---- #
#########################################################

variable P0 equal ${Pconfine} # Sets the reference pressure equal to the confining pressure
variable In0 equal ${In0_confine} # Overwrite the inertial number to smaller values for compression

include in.PRESET_BC_control_ISO_3 # preset oedometric conditions to target pressure
include in.START_BC_control_3 # Start Boundary controller
include in.PRESET_equilibrium_all_3 # Sets equilibrium conditions on all variables
include in.START_equilibrium_3 # Start equilibrium check

thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf
thermo ${Nthermo}
run ${Nmax} # Will be stopped at equilibrium

include in.STOP_BC_control_3
include in.STOP_equilibrium_3

##############################
# ---- TRIAXIAL TESTING ---- #
##############################

# ---- DEFINITION AND SETUP OF THE TRIAXIAL PARAMETERS AND GLOBAL PROPERTIES ---- #

include in.SET_triax_3 # Included here as it defines the state where there is zero strain

# ---- STRAIN-CONTROLLED AXIAL STRAIN RATE ---- #

variable In0 equal ${In0_triax} # Overwrite the inertial number to desired value for strain-controlled axial compression
variable Nrun_triax equal $(round(v_axialstrain/(v_ratemax*dt))) # Number of timesteps necessary to reach the final strain. ratemax cannot be decreased after that, otherwise the system will be limited in strain rate and not reach the final strain
variable Nthermo_triax equal $(round(v_Nrun_triax*v_Noutput_strain/v_axialstrain))
print "                                               THE TRIAXIAL TEST IS SET TO REQUIRE $(v_Nrun_triax) TIMESTEPS"
print "                                               WARNING: THE VALUES OF Nrun, Nthermo AND Ndump ARE OVERWRITTEN"


if "${COMPRESSION}" then "variable logstrain equal ln(ramp(0,-${axialstrain})+1)" &
elif "!${COMPRESSION}" "variable logstrain equal ln(ramp(0,${axialstrain})+1)" &
else "print 'Script Error: Triaxial test must be in compression or extension. Flag COMPRESSION was given $(v_COMPRESSION)'" "quit"

include in.PRESET_BC_control_TRIAX_3 # Preset triaxial
variable BC_ZZ_TARGET equal v_logstrain # Strain-controlled deformation in the z-direction

# ---- RUNNING OF THE TRIAXIAL TEST ---- #

variable fname_write_dump_triax string "${quote}${pathstr}/dump.co_triaxial_3_${suffixstr}.lammpstrj${quote}" # Name of triaxial dump file written with absolute path
dump savedmptriax particles custom ${Nthermo_triax} ${fname_write_dump_triax} id x y z diameter

velocity dummy set 0.0 0.0 0.0 # Stop boundaries

include in.START_BC_control_3 # Start imposing triaxial boundary conditions
thermo_style custom step v_pxx v_pyy v_pzz v_press v_qdev v_epsx v_epsy v_epsz v_epsv v_pf
thermo ${Nthermo_triax}
run ${Nrun_triax} # Will be stopped at equilibrium
include in.STOP_BC_control_3
