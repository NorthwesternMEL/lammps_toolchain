# LAMMPS INPUT FILE PERFORMING THE GENERATION AND PREPARATION OF THE SAMPLE UNDER ISOTROPIC COMPRESSION OF 3D GRANULAR SYSTEMS
# file: in.MAIN_sample_preparation_3
# author: JBC @ NORTHWESTERN UNIVERSITY, 09/12/2019
#
# THIS IS A MAIN SCRIPT. ALL VARIABLES AND COMPUTES IN THIS SUBSCRIPT ARE GLOBAL AND GIVEN DEFAULT VALUES THAT CAN BE OVERWRITTEN LOCALLY IN THE MAIN SCRIPT
# THIS SCRIPT MUST ONLY BE CALLED ONE TIME
#
#
# INFO :
# - THERE ARE CURRENTLY ISSUES WITH TRICLINIC CELLS AND POLYDISPERSE GRANULAR MODELS. WE MUST USE ORTHOGONAL BOX
#
# TODO:
# - Later when we go back to clumps. Maybe do a single file DEF_init_material with clump and PSD info
# - 

####################
# ---- HEADER ---- #
####################

# ---- INITIALIZATION OF LAMMPS REQUIREMENTS, PARTICLE TYPES, MATERIAL ---- #
#
include in.DEF_init_pre_3
include in.DEF_init_particles_3
include in.DEF_init_material_3

# ---- DEFINITION OF THE PARAMETERS ---- #
#
#include in.DEF_param_material_3
include in.DEF_param_sample_3
include in.DEF_param_simulation_3
include in.DEF_param_BC_control_3
include in.DEF_param_equilibrium_3
include in.DEF_init_post_3

# ---- DETERMINATION OF THE NUMBER OF PARTICLES ON INITIAL LATTICE ---- #
#
variable Nx equal $(round((v_Ntarget/v_aspectratio)^(1/3))) # Number of particles in horizontal directions X and Y
variable Nz equal $(v_aspectratio*v_Nx) # Number of particles in vertical direction Z
variable Nparticles equal "v_Nx*v_Nx*v_Nz" # Number of clumps in the simulation

# ---- PERIODIC v.s. WALLS ---- #
#
variable BC_XX_WALL equal false # Overwrite default, creates PBC
variable BC_YY_WALL equal false # Overwrite default, creates PBC
variable BC_ZZ_WALL equal false # Overwrite default, creates PBC

# ---- DEFINITION OF THE ORTHOGONAL CELL ---- #
#
if "${BC_XX_WALL} && ${BC_YY_WALL} && ${BC_ZZ_WALL}" then &
"region insert block 0.0 $(v_spacing*v_dmax*(v_Nx-0.5)) 0.0 $(v_spacing*v_dmax*(v_Nx-0.5)) 0.0 $(v_spacing*v_dmax*(v_Nz-0.5)) # Initial lattice insertion volume for walls BC" &
"region box block $(-v_spacing*v_dmax*(0.5+v_wallpad)) $(v_spacing*v_dmax*(v_Nx-0.5+v_wallpad)) $(-v_spacing*v_dmax*(0.5+v_wallpad)) $(v_spacing*v_dmax*(v_Nx-0.5+v_wallpad)) $(-v_spacing*v_dmax*(0.5+v_wallpad)) $(v_spacing*v_dmax*(v_Nz-0.5+v_wallpad)) #Initial simulation box for walls BC" &
elif "!${BC_XX_WALL} && !${BC_YY_WALL} && !${BC_ZZ_WALL}" &
"region insert block 0.0 $(v_spacing*v_dmax*v_Nx) 0.0 $(v_spacing*v_dmax*v_Nx) 0.0 $(v_spacing*v_dmax*v_Nz) # Initial lattice insertion volume for periodic BC" &
"region box block $(-v_spacing*v_dmax*0.5) $(v_spacing*v_dmax*(v_Nx-0.5)) $(-v_spacing*v_dmax*0.5) $(v_spacing*v_dmax*(v_Nx-0.5)) $(-v_spacing*v_dmax*0.5) $(v_spacing*v_dmax*(v_Nz-0.5)) # Initial simulation box for periodic BC" &
else &
"print 'Script Error: boundaries must either all be periodic or all have walls. Flags BC_AXIS_WALL were given $(v_BC_XX_WALL), $(v_BC_YY_WALL) and $(v_BC_ZZ_WALL)'" &
"quit"

create_box 3 box # General number of atom types: 1=real atoms and center of clumps (for convenience), 2=dummy atoms for boundary control, 3=non-center atoms of clumps

# ---- MATERIAL AND CONTACT LAW ---- #
#
pair_style	granular
pair_coeff * * hertz/material $E ${ncdc} ${nu} tangential mindlin_rescale NULL ${tcdr} 0.0 # Frictionless for initial preparation

# ---- CREATION OF THE PARTICLES AND DUMMY PARTICLES FOR BOUNDARY CONTROL ---- #
#

lattice sc $(v_spacing*v_dmax) # Definition of the deposition lattice
if "${SPHERE}" then "create_atoms 1 region insert # Create real particles on a cubic lattice in the insertion region" &
elif "!${SPHERE}" &
"molecule mol_poly_clump ${clump_filename} scale ${dmax} # All particles are initially inserted at size dmax to avoid wrapping around PBCs" &
"create_atoms 0 region insert mol mol_poly_clump ${orientseed} # Create real particles on a cubic lattice in the insertion region" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"

create_atoms 2 single $(0.5*(xhi+xlo)) $(0.5*(yhi+ylo)) $(0.5*(zhi+zlo)) units box # Create dummy particle for volumetric control of boundaries
create_atoms 2 single $(0.5*(xhi+xlo)) $(0.5*(yhi+ylo)) $(0.5*(zhi+zlo)) units box # Create dummy particle for shear/tilt control boundaries
set type 2 diameter ${dmax} # Necessary for correct cutoff
set type 2 mass $(v_Nparticles^(2/3)*v_msys) # mass of boundary = Approximate mass of all particles facing one boundary

# ---- SETUP OF THE BOUNDARY CONDITIONS, STRUCTURES, RIGID BODIES (if clumps), POLYDISPERSITY AND CONVERGENCE ---- #
#

variable READWALL equal false # determine wall coordinates from current box dimensions and wall padding
include in.SET_structure_3
include in.SET_boundary_3
include in.SET_macro_properties_3

if "${SPHERE} && ${UNIFORMPSD}" then "variable drand atom random(${dmin},${dmax},${dseed}) # Random generation of particles diameters, reference case for coding fallback" &
elif "${SPHERE} && !${UNIFORMPSD}" "variable drand atomfile ${PSD_filename} # Random particles diameters picked from the selected PSD" &
elif "!${SPHERE} && ${UNIFORMPSD}" "variable drand atom random($(v_dmin/v_dmax),1,${dseed}) # Random generation of particles diameters, scaling from dmax, reference case for coding fallback" &
elif "!${SPHERE} && !${UNIFORMPSD}" "variable drand0 atomfile ${PSD_filename}" "variable drand atom v_drand0/v_dmax # Random particles diameters picked from the selected PSD, scaling from dmax"

if "${SPHERE}" then &
"set type 1 diameter v_drand" &
"set type 1 density ${rho}" &
"fix time_integration_particles particles nve/sphere" &
elif "!${SPHERE}" &
"fix same_rand all store/state 0 v_drand" &
"fix diam0 all store/state 0 diameter # Store initial diameter" &
"variable same_rand atom f_same_rand" &
"compute randclump centers reduce/chunk chunk_clump min v_same_rand # per-clump number of contact" &
"compute randparticles_spread particles chunk/spread/atom chunk_clump c_randclump # Real number of contact per chunk spread back onto atoms (coordination number z of clump the atom belongs to)" &
"compute com_coordu_initializer particles reduce max c_com_clump_global[1] c_coordu_particles[1] c_randparticles_spread # to initialize the com and coordu computes" &
"thermo_style custom step c_com_coordu_initializer[1] c_com_coordu_initializer[2] c_com_coordu_initializer[3]" &
"run 0" &
"variable massnew atom 'mass*v_rho*c_randparticles_spread^3'" &
"variable diamnew atom 'f_diam0*c_randparticles_spread'" &
"variable xnew atom c_com_clump_global[1]+c_randparticles_spread*(c_coordu_particles[1]-c_com_clump_global[1]) # Remapped unwrapped new xu coordinates of all particles in all clumps" &
"variable ynew atom c_com_clump_global[2]+c_randparticles_spread*(c_coordu_particles[2]-c_com_clump_global[2]) # Remapped unwrapped new yu coordinates of all particles in all clumps" &
"variable znew atom c_com_clump_global[3]+c_randparticles_spread*(c_coordu_particles[3]-c_com_clump_global[3]) # Remapped unwrapped new zu coordinates of all particles in all clumps" &
"set group particles x v_xnew y v_ynew z v_znew diameter v_diamnew mass v_massnew" &
"unfix diam0" &
"uncompute com_coordu_initializer" &
"fix time_integration_clumps particles rigid/small molecule" "fix_modify time_integration_clumps bodyforces early # forces must be calculated early for per-clump damping to work" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"

include in.SET_conv_3

dump 1 particles custom 5000 dump.co_test.lammpstrj id x y z diameter mass mol
dump 2 dummy custom 5000 dump.co_dummy.lammpstrj id x y z diameter fx fy fz mol








#################################
# ---- MIXING OF PARTICLES ---- #
#################################

## MINIMUM PACKING FRACTION FOR MIXING

thermo_style custom step v_pf # initialize packing fraction
run 0 # initialize packing fraction
if "${pf} > ${pfmin}" then "change_box all x scale $((v_pf/v_pfmin)^(1/3)) y scale $((v_pf/v_pfmin)^(1/3)) z scale $((v_pf/v_pfmin)^(1/3)) remap units box # Corrected dimensions of 3D simulation box, not sure that works with walls ? It should because remapped"

## MIXING

fix pos0 centers store/state 0 x y z
fix pos1 centers store/state 1 xu yu zu # no need since no one crosses ?
variable travel atom " sqrt((f_pos0[1]-f_pos1[1])^2 + (f_pos0[2]-f_pos1[2])^2 + (f_pos0[3]-f_pos1[3])^2)/v_dsys"
compute pos2 centers reduce ave v_travel # Displacement of particle relative to its diameter

variable mixamount equal 5.0
variable haltmix equal "c_pos2 >= v_mixamount" # Average particle travel x times its diameter, depends on PBC or WALL, less movement with walls
fix stopmix all halt 10000 v_haltmix == 1 error continue

velocity particles create $(1e3*v_msys*((v_dsys/1e4)/v_tsyshertz)^2/(3*1.380e-23)) ${mixseed} temp temp_sphere # Temperature based on gas kinetic theory T=mv^2/3kb (Boltzmann constant kb=1.380e-23), v based on overlap = d/1e4 (arbitrary, small) and characteristic time
run 0
velocity particles scale $(1e3*v_msys*((v_dsys/1e4)/v_tsyshertz)^2/(3*1.380e-23)) temp temp_sphere
thermo_style custom step c_pos2
thermo 10000
run 10000000

unfix pos0
unfix pos1
uncompute pos2
variable haltmix delete
unfix stopmix
variable mixamount delete

variable expansion equal 0.01 # We stop when average indentation (Kappa^-1 = h/d) is smaller than 0.001 [Agnolin 2007] uses 0.005 to remap, we do the same but use a smaller criterion for convergence before making a bigger remap using 0.005
change_box all x scale $(1+5*v_expansion) y scale $(1+5*v_expansion) z scale $(1+5*v_expansion) remap units box # Expansion multiplied by 5 to make sure there is no contact left
velocity all set 0.0 0.0 0.0


##################################################################
# ---- PERCOLATION SHRINKAGE TO THE TARGET PACKING FRACTION ---- #
##################################################################

if "${SPHERE}" then "fix damping_particles particles cundamp ${damp0particles} ${damp0particles}" &
elif "!${SPHERE}" "fix damping_particles particles cundamp/rigid time_integration_clumps ${damp0particles} ${damp0particles}" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"


## PERCOLATION SHRINKAGE 

variable In0 equal 1e-1 # Overwrite the inertial number to large values for percolation
fix percolation particles deform 1 x trate -${ratemax} y trate -${ratemax} z trate -${ratemax} remap x

variable haltpercolation equal "v_pf > v_pf0" # Run halted when desired packing reached
fix stoppercolation all halt 1 v_haltpercolation == 1 error continue
 
thermo_style custom step temp ke press v_pf
thermo_modify temp temp_sphere # take into account sphere DOFs
thermo 10000
run 10000000 # Large run that will be stopped by fix halt 

velocity all set 0.0 0.0 0.0
unfix percolation
unfix stoppercolation
variable haltpercolation delete
 
## RELAXING TO A STATE WITH NO CONTACT AND SIMILAR PACKING FRACTION

variable expansion equal 0.001 # We stop when average indentation (Kappa^-1 = h/d) is smaller than 0.001 [Agnolin 2007] uses 0.005 to remap, we do the same but use a smaller criterion for convergence before making a bigger remap using 0.005
variable Plim equal "(v_E/(1-v_nu^2))*(v_expansion^(3/2))" # Limit pressure corresponding to the indentation, determined from indentation and material properties using stiffness number formula
variable haltrelax equal "press < v_Plim"
fix relax all halt 10000 v_haltrelax == 1 error continue # The frequency of that fix must match that of the thermo for pressure to be tallied on the right timestep

thermo 10000 # The frequency of that thermo must match that of the fix halt for pressure to be tallied on the right timestep
run 1000000
 
unfix relax

change_box all x scale $(1+5*v_expansion) y scale $(1+5*v_expansion) z scale $(1+5*v_expansion) remap units box # Expansion multiplied by 5 to make sure there is no contact left
velocity all set 0.0 0.0 0.0
set group all omega 0.0 0.0 0.0
run 10000 # Visual verification that all contacts have been separated

variable haltrelax delete
variable Plim delete
variable expansion delete
 
##########################################################
# ---- ISOTROPIC COMPRESSION TO THE TARGET PRESSURE ---- #
##########################################################

pair_coeff * * hertz/material $E ${ncdc} ${nu} tangential mindlin_rescale NULL ${tcdr} $f # Contact law with friction for final assembly
variable BC_vprev_factor equal 0.95 # 
## First run, equilibrate pressure

variable In0 equal 1e-2 # Overwrite the inertial number to smaller value for compression, this is sufficient to stabilize pressure when remapping is used
variable REMAP equal true # Initial compaction using remapping to ensure homogeneous compaction

variable SHEARRELAX equal false # No shear/tilt relax - orthogonal box
include in.PRESET_BC_control_ISO_3 # preset isotropic conditions to target pressure
include in.START_BC_control_3 # Start Boundary controller

include in.PRESET_equilibrium_stress_3 # Sets equilibrium conditions on stress only
include in.START_equilibrium_3 # Start equilibrium check

thermo_style custom step v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf c_zmax
thermo ${Nthermo}
run ${Nmax} # Will be stopped at equilibrium

## Second run, equilibrate system

variable In0 equal 1e-3 # Overwrite the inertial number to small value for equilibration

if "${BC_XX_WALL} && ${BC_YY_WALL} && ${BC_ZZ_WALL}" then &
"variable REMAP equal false # Final equilibration without remapping if walls" &
elif "!${BC_XX_WALL} && !${BC_YY_WALL} && !${BC_ZZ_WALL}" &
"variable REMAP equal true # Final equilibration with remapping if PBC" &
else &
"print 'Script Error: boundaries must either all be periodic or all have walls. Flags BC_AXIS_WALL were given $(v_BC_XX_WALL), $(v_BC_YY_WALL) and $(v_BC_ZZ_WALL)'" &
"quit"
# ------------------------- THIS DOES NOT DO AYTHING UNLESS THE BC_CONTROL IS STOPPPED AND STARTED. THE REMAP OPTION GOES INTO THE FIX DEFORM SO IF IT IS NOT REDEFINED, NOTHING HAPPENS

include in.PRESET_equilibrium_all_3 # Sets equilibrium conditions on all variables
include in.STOP_BC_control_3  # Must do stop / start to change the remapping properties
include in.START_BC_control_3
if "${SPHERE}" then "fix damping_floaters_visct floaters viscous $(v_visc0particles*2*sqrt(v_msys*v_hertzstiff))" "fix damping_floaters_viscr floaters viscous/sphere $(v_visc0particles*0.5*v_dsys^2*sqrt(2*v_msys*v_hertzstiff_rot/5))" &
elif "!${SPHERE}" "fix damping_floaters floaters viscous/rigid time_integration_clumps $(v_visc0particles*2*sqrt(v_msys*v_hertzstiff)) $(v_visc0particles*0.5*v_dsys^2*sqrt(2*v_msys*v_hertzstiff_rot/5))" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"


thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf
thermo ${Nthermo}
run ${Nmax} # Will be stopped at equilibrium
include in.STOP_BC_control_3 # Stop Boundary controller
include in.STOP_equilibrium_3 # Stop equilibrium check

set group floaters omega 0.0 0.0 0.0 # Kill completely velocity of floaters
velocity floaters set 0.0 0.0 0.0 # Kill completely velocity of floaters

###########################################
# ---- OUTPUT / SAVE SYSTEM GEOMETRY ---- #
###########################################

# Walls coordinates

if '${BC_XX_WALL} && ${BC_YY_WALL} && ${BC_ZZ_WALL}' then &
'print """# Position of the walls after initial deposition
$(v_xlo_BC) # xlo wall
$(v_xhi_BC) # xhi wall
$(v_ylo_BC) # ylo wall
$(v_yhi_BC) # yhi wall
$(v_zlo_BC) # zlo wall
$(v_zhi_BC) # zhi wall """ file wpos0.txt'

# Particles coordinates and topology

dump savedmpcoor particles custom 1 dump.co_sample_3.lammpstrj id x y z diameter
dump_modify savedmpcoor sort id

compute savepair particles property/local patom1 patom2 # pairs of particles within force cutoff
compute savecontact particles pair/local dist force p4 p10 p11 p12 # interparticle distance, normal force magnitude, tangent force magnitude, branch vector x, y, z
dump savedmptopo particles local 1 dump.topo_sample_3.lammpstrj c_savepair[*] c_savecontact[*]

run 0 # To output final coordinates and neighbor list

# Restart / data file

write_restart restart.sample_3
write_data data.sample_3
