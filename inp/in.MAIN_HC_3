# LAMMPS INPUT FILE PERFORMING THE GENERAL HEATING AND COOLING OF SAMPLES OF 3D GRANULAR SYSTEMS
# file: in.MAIN_HC_3
# author: JBC @ NORTHWESTERN UNIVERSITY, 08/12/2019
#
# THIS IS A MAIN SCRIPT # ALL VARIABLES AND COMPUTES IN THIS SUBSCRIPT ARE GLOBAL AND GIVEN DEFAULT VALUES THAT CAN BE OVERWRITTEN LOCALLY IN THE MAIN SCRIPT
# THIS SCRIPT MUST ONLY BE CALLED ONE TIME
#
#
# INFO :
# - 
#
# TODO:
# - THE REACHING TARGET PERSSURE PART OF THAT FILE WILL BE SHARED WITH ALL MAIN FILES THAT ARE NOT THE INITIAL ASSEMBLY, SHOULD WE GENERALIZE IT AND EXTERNALIZE IT ?
# - NEED SOMETHING SAFER FOR THE WALLS, not sure what I meant by that when I wrote it
# - figure out mindlin_rescale

####################
# ---- HEADER ---- #
####################

# ---- LOAD INITIAL SAMPLE ---- #

read_restart restart.sample_3

# ---- DEFINITION OF THE PARAMETERS ---- #
#
include in.DEF_init_particles_3
include in.DEF_init_material_3
include in.DEF_param_sample_3
include in.DEF_param_simulation_3
include in.DEF_param_BC_control_3
include in.DEF_param_equilibrium_3
include in.DEF_init_post_3

# ---- SETUP OF THE BOUNDARY CONDITIONS AND STRUCTURES ---- #

variable BC_XX_WALL equal false # Overwrite default, creates walls (true) or PBC (false)
variable BC_YY_WALL equal false # Overwrite default, creates walls (true) or PBC (false)
variable BC_ZZ_WALL equal false # Overwrite default, creates walls (true) or PBC (false)

variable READWALL equal true # determine wall coordinates (if wall) from file. Is always true (causes no issue if there is no wall)

include in.SET_structure_3
include in.SET_boundary_3
include in.SET_macro_properties_3

# ---- TIME INTEGRATION ---- #
if "${SPHERE}" then "fix time_integration_particles particles nve/sphere" &
elif "!${SPHERE}" "fix time_integration_clumps particles rigid/small molecule" "fix_modify time_integration_clumps bodyforces early # forces must be calculated early for per-clump damping to work" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"

include in.SET_conv_3

# ---- MATERIAL AND CONTACT LAW ---- #

pair_style	granular
pair_coeff * * hertz/material $E ${ncdc} ${nu} tangential mindlin_rescale NULL ${tcdr} $f # Contact law with friction

# ---- DAMPING ---- #

if "${SPHERE}" then &
"fix damp_particles_visct floaters viscous $(v_visc0particles*2*sqrt(v_msys*v_hertzstiff)) # Translational Global damping of particles" &
"fix damp_particles_viscr floaters viscous/sphere $(v_visc0particles*0.5*v_dsys^2*sqrt(2*v_msys*v_hertzstiff_rot/5)) # Rotational Global damping of particles" &
"fix damp_particles_Yade particles cundamp ${damp0particles} ${damp0particles} # Yade Translational and Rotational damping of particles" &
elif "!${SPHERE}" &
"fix damp_particles_visct floaters viscous/rigid time_integration_clumps $(v_visc0particles*2*sqrt(v_msys*v_hertzstiff)) $(v_visc0particles*0.5*v_dsys^2*sqrt(2*v_msys*v_hertzstiff_rot/5)) # Global damping of rigid particles" &
"fix damp_particles_Yade particles cundamp/rigid time_integration_clumps ${damp0particles} ${damp0particles} # Yade Translational and Rotational damping of particles" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"


#####################################################################
# ---- ISOTROPIC/OEDOMETRIC COMPRESSION TO THE TARGET PRESSURE ---- #
#####################################################################

if "${BC_XX_WALL} && ${BC_YY_WALL} && ${BC_ZZ_WALL}" then &
"variable REMAP equal false # Final equilibration without remapping if walls" &
elif "!${BC_XX_WALL} && !${BC_YY_WALL} && !${BC_ZZ_WALL}" &
"variable REMAP equal true # Final equilibration with remapping if PBC" &
else &
"print 'Script Error: boundaries must either all be periodic or all have walls. Flags BC_AXIS_WALL were given $(v_BC_XX_WALL), $(v_BC_YY_WALL) and $(v_BC_ZZ_WALL)'" &
"quit"

variable Ptarget equal 1*1e3 # Vertical pressure of 1 kPa
variable P0 equal $(v_Ptarget)
variable In0 equal 1e-4 # Overwrite the inertial number to smaller values for compression
variable SHEARRELAX equal false # No shear/tilt relax

include in.PRESET_BC_control_OEDO_3 # preset oedometric conditions to target pressure
include in.START_BC_control_3 # Start Boundary controller
include in.PRESET_equilibrium_all_3 # Sets equilibrium conditions on all variables
include in.START_equilibrium_3 # Start equilibrium check

thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf
thermo ${Nthermo}
run ${Nmax} # Will be stopped at equilibrium

include in.STOP_BC_control_3
include in.STOP_equilibrium_3

########################################
# ---- HEATING AND COOLING CYCLES ---- #
########################################

# ---- DEFINITION AND SETUP OF THE HEATING / COOLING PARAMETERS AND GLOBAL PROPERTIES ---- #

include in.DEF_param_heating_cooling_3
include in.SET_heating_cooling_3

# ---- HEATING - COOLING CYLES ---- #

variable In0 equal 1e-3 # Overwrite the inertial number to larger values for wall motion accomodation
velocity dummy set 0.0 0.0 0.0 # Stop walls

compute final_geometry particles property/local patom1 patom2 cutoff radius # Determines the contact topology
compute final_topology particles pair/local force p4 p10 p11 p12 cutoff radius # Determines the contact properties

# Save initial state
thermo_style custom step v_DTcurrent v_epsv v_pf v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz # 10 entries
log log.hc3 append
dump dump_co particles custom 1 dump.co_sample_before_cycles.lammpstrj id x y z radius diameter
dump_modify dump_co sort id
dump dump_topo particles local 1 dump.topo_sample_before_cycles.lammpstrj c_final_geometry[*] c_final_topology[*]
run 0 # To save state in log file for post-processing
undump dump_co
undump dump_topo
log log.lammps append

## Begin cycles

variable cycleloop loop ${Ncycle}
label labelcycleloop

################################
print "					HEATING"
################################

variable HEATING equal false # Heating -> increase particles dimensions
variable steplooph loop $(floor(v_DTtarget/v_DTstep+0.5))
label labelsteplooph

# Temperature variation
include in.START_BC_control_3 # Resets BC controller for correct dummy particle tracking
thermo_style custom step v_DTcurrent v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz
include in.RUN_HC_1step_3
include in.STOP_BC_control_3
thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf

# Equilibrium
include in.START_BC_control_3 # Resets BC controller for correct dummy particle tracking
include in.PRESET_equilibrium_all_3 # Sets equilibrium conditions on all variables
include in.START_equilibrium_3
thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf
thermo ${Nthermo}
run ${Nmax} # Will be stopped at equilibrium
include in.STOP_BC_control_3
include in.STOP_equilibrium_3
write_restart restart.end_current_step_afterheat_cycle_${cycleloop}_step_${steplooph}_3 # Save current state
# Save equilibrium state after heating
thermo_style custom step v_DTcurrent v_epsv v_pf v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz # 10 entries
log log.hc3 append
dump dump_co particles custom 1 dump.co_sample_after_heating_cycle_${cycleloop}_step_${steplooph}.lammpstrj id x y z radius diameter
dump_modify dump_co sort id
dump dump_topo particles local 1 dump.topo_sample_after_heating_cycle_${cycleloop}_step_${steplooph}.lammpstrj c_final_geometry[*] c_final_topology[*]
run 0 # To save state in log file for post-processing
undump dump_co
undump dump_topo
log log.lammps append


next steplooph
jump SELF labelsteplooph

############################
print "				COOLING"
############################

variable HEATING equal true # Cooling -> decrease particles dimensions
variable steploopc loop $(floor(v_DTtarget/v_DTstep+0.5))
label labelsteploopc

# Temperature variation
include in.START_BC_control_3 # Resets BC controller for correct dummy particle tracking
thermo_style custom step v_DTcurrent v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz
include in.RUN_HC_1step_3
include in.STOP_BC_control_3

# Equilibrium
include in.START_BC_control_3 # Resets BC controller for correct dummy particle tracking
include in.PRESET_equilibrium_all_3 # Sets equilibrium conditions on all variables
include in.START_equilibrium_3
thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf
thermo ${Nthermo}
run ${Nmax} # Will be stopped at equilibrium
include in.STOP_BC_control_3
include in.STOP_equilibrium_3
write_restart restart.end_current_step_aftercool_cycle_${cycleloop}_step_${steploopc}_3 # Save current state
# Save equilibrium state after cooling
thermo_style custom step v_DTcurrent v_epsv v_pf v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz # 10 entries
log log.hc3 append
dump dump_co particles custom 1 dump.co_sample_after_cooling_cycle_${cycleloop}_step_${steploopc}.lammpstrj id x y z radius diameter
dump_modify dump_co sort id
dump dump_topo particles local 1 dump.topo_sample_after_cooling_cycle_${cycleloop}_step_${steploopc}.lammpstrj c_final_geometry[*] c_final_topology[*]
run 0 # To save state in log file for post-processing
undump dump_co
undump dump_topo
log log.lammps append


next steploopc
jump SELF labelsteploopc

next cycleloop
jump SELF labelcycleloop
