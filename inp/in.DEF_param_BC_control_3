# LAMMPS INPUT FILE DEFINING THE PARAMETERS AND FLAGS FOR BOUNDARY CONDITIONS CONTROL FOR 3D GRANULAR SYSTEMS
# file: in.DEF_param_BC_control
# author: JBC @ NORTHWESTERN UNIVERSITY, (jibril.coulibaly@gmail.com)
#
# THIS IS A DEF SCRIPT, ALL VARIABLES AND COMPUTES IN THIS SUBSCRIPT ARE GLOBAL AND GIVEN DEFAULT VALUES THAT CAN BE OVERWRITTEN LOCALLY IN THE MAIN SCRIPT
# THIS SCRIPT MUST ONLY BE CALLED ONE TIME
#
#
# INFO :
# - variable `var_param_BC_control_3` (index-style) is passed to LAMMPS by command line switch -var var_param_BC_control_3
#
# TODO:
# - WE MUST MAKE SURE THE SELECTION BETWEEN WALLS AND PBC IS SAFE, RIGHT NOW A SIMULATION RPEPARED WITH WALLS CAN RUN WITH PBC AND THE OPPOSITE AS WELL (CREATING A BIGGER MESS THIS LATTER WAY)
# - CREATE DEFAULT VALUES OF THE VARIABLES THAT ARE CHANGED BY THE PRESET FiLES, these are overwritten anyway right?
# - 


# ---- VALUES OF BOUNDARY CONDITIONS ---- #

# These first variables are shown here for definition purposes.
# Values irrelevant, must be hard overwritten by MAIN and PRESET scripts. Only defined here for clarity


variable BC_CONTROL equal false # If BC CONTROL IS CURRENTLY ACTIVE. Informs equilibrium check whether or not to verify pressure equilibrium at boundaries, an alternative/addition would be a BC_FIXED preset
variable Nb_moving_BC equal 3 # Number of moving boundaries. BC controller adjust maximum velocity of dummy particles (nve/limit strain rate * L * sqrt(Nb_moving)). If defined as 3 in uniaxial case (worst case), the maximum strain rate is at most overestimated by a factor sqrt(3) ~1.73

variable BC_XX_STRESS_CONTROLLED equal false # BC in XX axis is: true=stress-controlled, false=strain-controlled
variable BC_YY_STRESS_CONTROLLED equal false # BC in YY axis is: true=stress-controlled, false=strain-controlled
variable BC_ZZ_STRESS_CONTROLLED equal false # BC in ZZ axis is: true=stress-controlled, false=strain-controlled
variable BC_XY_STRESS_CONTROLLED equal false # BC in XY axis is: true=stress-controlled, false=strain-controlled. This flag must be false (strain-controlled) when using walls and the associated value must be zero because tilt is not allowed when using frictionless walls
variable BC_XZ_STRESS_CONTROLLED equal false # BC in XZ axis is: true=stress-controlled, false=strain-controlled. This flag must be false (strain-controlled) when using walls and the associated value must be zero because tilt is not allowed when using frictionless walls
variable BC_YZ_STRESS_CONTROLLED equal false # BC in YZ axis is: true=stress-controlled, false=strain-controlled. This flag must be false (strain-controlled) when using walls and the associated value must be zero because tilt is not allowed when using frictionless walls

variable BC_XX_TARGET equal 0.0 # Target value of STRESS or STRAIN in XX axis
variable BC_YY_TARGET equal 0.0 # Target value of STRESS or STRAIN in YY axis
variable BC_ZZ_TARGET equal 0.0 # Target value of STRESS or STRAIN in ZZ axis
variable BC_XY_TARGET equal 0.0 # Target value of STRESS or STRAIN in XY axis. This value should be zero (0) in most cases: zero strain with walls or PBC, zero stress in shear-relaxed PBC
variable BC_XZ_TARGET equal 0.0 # Target value of STRESS or STRAIN in XZ axis. This value should be zero (0) in most cases: zero strain with walls or PBC, zero stress in shear-relaxed PBC
variable BC_YZ_TARGET equal 0.0 # Target value of STRESS or STRAIN in YZ axis. This value should be zero (0) in most cases: zero strain with walls or PBC, zero stress in shear-relaxed PBC


# ---- BOUNDARY CONTROLLER PARAMETERS ---- #

# Kinematics of deformation
variable REMAP equal ${var_param_BC_control_3} # Remapping of coordinates during boundary control false=no remapping ; true=remapping
next var_param_BC_control_3
variable SHEARRELAX equal ${var_param_BC_control_3} # Shear/tilt coordinates of the box are relaxed when PBC are used. true=shear relaxed ; false=no tilt, shear stress present. MUST BE DEFINED BEFORE CALLING THE PRESETS
next var_param_BC_control_3

# Boundary servo-control: strain_rate = (prefactor * strain_rate) + (1-damping)*gain*(P-Ptarget)/stiffness # Write it better
variable BC_vprev_factor equal ${var_param_BC_control_3} # pre-factor of the velocity carried over from previous iteration in stress-controlled boundary
next var_param_BC_control_3
variable BC_gain equal ${var_param_BC_control_3} # Gain pre-factor on stiffness in stress-controlled boundary
next var_param_BC_control_3
variable BC_damping equal ${var_param_BC_control_3} # Damping value of boundary
# NEVER call `next` on the variable at the end of the definitions.
# This would exhaust the variable and skip the next `jump` command and cause other scripts to fail !
