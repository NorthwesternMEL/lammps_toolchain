# LAMMPS INPUT FILE PERFORMING THE GENERAL HEATING AND COOLING OF SAMPLES OF 3D GRANULAR SYSTEMS
# file: in.MAIN_heat_cool_3
# author: JBC @ NORTHWESTERN UNIVERSITY, (jibril.coulibaly@gmail.com)
#
# Copyright (C) 2023 Mechanics and Energy Laboratory, Northwestern University
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# THIS IS A MAIN SCRIPT # ALL VARIABLES AND COMPUTES IN THIS SUBSCRIPT ARE GLOBAL AND GIVEN DEFAULT VALUES THAT CAN BE OVERWRITTEN LOCALLY IN THE MAIN SCRIPT
# THIS SCRIPT MUST ONLY BE CALLED ONE TIME
#
#
# INFO :
# -
#
# TODO:
# - THE REACHING TARGET PERSSURE PART OF THAT FILE WILL BE SHARED WITH ALL MAIN FILES THAT ARE NOT THE INITIAL ASSEMBLY, SHOULD WE GENERALIZE IT AND EXTERNALIZE IT ?
# - NEED SOMETHING SAFER FOR THE WALLS, not sure what I meant by that when I wrote it
# - We might think of distinc temperature amplitudes in the future, i.e. progressive heating, progressive cooling

####################
# ---- HEADER ---- #
####################

# ---- LOAD INITIAL SAMPLE ---- #

include in.DEF_init_IO
read_restart ${fname_read_restart}

# ---- DEFINITION OF THE PARAMETERS ---- #

include in.DEF_param_heat_cool_3
include in.DEF_init_particles_3
include in.DEF_init_material_3
include in.DEF_init_boundary_3
include in.DEF_param_simulation_3
include in.DEF_param_BC_control_3
include in.DEF_param_equilibrium_3
include in.DEF_init_post_3

# ---- SETUP OF THE BOUNDARY CONDITIONS AND STRUCTURES ---- #

variable READWALL equal true # Read wall coordinates from file. Hardcoded: walls (if any) always read as they existed previously when using a restarted script
include in.SET_structure_3
include in.SET_boundary_3
include in.SET_macro_properties_3

# ---- TIME INTEGRATION ---- #
if "${SPHERE}" then "fix time_integration_particles particles nve/sphere" &
elif "!${SPHERE}" "fix time_integration_clumps particles rigid/small molecule" "fix_modify time_integration_clumps bodyforces early # forces must be calculated early for per-clump damping to work" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"

include in.SET_conv_3

# ---- MATERIAL AND CONTACT LAW ---- #

pair_style	granular
pair_coeff * * hertz/material $E ${ncdc} ${nu} tangential mindlin_rescale/force NULL ${tcdr} $f # Contact law with friction

# ---- DAMPING ---- #

if "${SPHERE}" then &
"fix damp_particles_visct floaters viscous ${viscdamp_lin} # Translational Global damping of particles" &
"fix damp_particles_viscr floaters viscous/sphere ${viscdamp_rot} # Rotational Global damping of particles" &
"fix damp_particles_Cundall particles damping/cundall ${cundamp0} ${cundamp0} # Cundall Translational and Rotational damping of particles" &
elif "!${SPHERE}" &
"fix damp_particles_visct floaters viscous/rigid time_integration_clumps ${viscdamp_lin} ${viscdamp_rot} # Global damping of rigid particles" &
"fix damp_particles_Yade particles cundamp/rigid time_integration_clumps ${cundamp0} ${cundamp0} # Yade Translational and Rotational damping of particles" &
else "print 'Script Error: flag SPHERE should have value true or false and was given $(v_SPHERE)'" "quit"

#---- GRAVITY ----#
fix gravity_particles particles gravity ${gravity_mag} vector ${gravity_x} ${gravity_y} ${gravity_z}

#####################################################################
# ---- ISOTROPIC/OEDOMETRIC COMPRESSION TO THE TARGET PRESSURE ---- #
#####################################################################


variable P0 equal ${Pheat_cool}
variable In0 equal ${In0_compression} # Overwrite the inertial number to smaller values for compression
include in.SET_ref_conf_3 # Defines a reference configuration for the initial compression (necessary for boundary controller)

if "${COMPRESSION_ISO}" then "include in.PRESET_BC_control_ISO_3 # preset isotropic conditions to target pressure" &
elif "!${COMPRESSION_ISO}" "include in.PRESET_BC_control_OEDO_3 # preset oedometric conditions to target pressure" &
else "print 'Script Error: flag COMPRESSION_ISO should have value true or false and was given $(v_COMPRESSION_ISO)'" "quit"

include in.PRESET_equilibrium_all_3 # Sets equilibrium conditions on all variables

include in.START_equilibrium_3 # Start equilibrium check
include in.START_BC_control_3 # Start Boundary controller

thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_pxy v_pxz v_pyz v_lx v_ly v_lz xy xz yz v_pf
thermo ${Nthermo}
run ${Nmax} # Will be stopped at equilibrium

include in.STOP_BC_control_3
include in.STOP_equilibrium_3

velocity dummy set 0.0 0.0 0.0 # Stop boundaries motion

####################################################################################
# ---- HEATING AND COOLING CYCLES UNDER ISOTROPIC/OEDOMETRIC/FIXED CONDITIONS ---- #
####################################################################################

# ---- DEFINITION AND SETUP OF THE HEATING / COOLING PARAMETERS AND GLOBAL PROPERTIES ---- #

include in.SET_ref_conf_3 # Defines the new reference configuration, at the start of the thermal cycles
include in.SET_heat_cool_3 # Define inflation relative to the reference temperature

compute final_geometry particles property/local patom1 patom2 cutoff radius # Determines the contact topology
compute final_topology particles pair/local force p4 p10 p11 p12 cutoff radius # Determines the contact properties

variable fname_write_dump_co string "${pathstr}/dump.co_sample_before_cycles_3${suffixstr}.lammpstrj" # Name of coordinates dump file written with absolute path
variable fname_write_dump_topo string "${pathstr}/dump.topo_sample_before_cycles_3${suffixstr}.lammpstrj" # Name of topology dump file written with absolute path

variable fname_write_log string "${pathstr}/log.heat_cool_3${suffixstr}.lammps" # Name of the log file. Consistent with definition in `script_heat_cool_3`
variable fname_write_log_eq string "${pathstr}/log.heat_cool_3_eq${suffixstr}.lammps" # Name of the log file for the equilibrium snapshots. Consistent with definition in `script_heat_cool_3`


# ---- INITIAL STATE BEFORE CYCLES ---- #

thermo_style custom step v_DTcurrent v_epsx v_epsy v_epsz v_epsv v_pf v_pxx v_pyy v_pzz v_press v_qdev v_pxy v_pxz v_pyz # 15 entries
dump dump_co particles custom 1 ${fname_write_dump_co} id x y z diameter
dump_modify dump_co sort id
dump dump_topo particles local 1 ${fname_write_dump_topo} c_final_geometry[*] c_final_topology[*]
log ${fname_write_log_eq}
run 0 # To save state in log file for post-processing
log ${fname_write_log} append
undump dump_co
undump dump_topo


# ---- HEATING - COOLING CYLES ---- #

print "                                               WARNING: THE VALUES OF Nrun AND Ndump ARE OVERWRITTEN"

## Degenerate case of heating or cooling only, i.e. no cycle, when Ncycle = 0
if "${Ncycle}==0" then &
"variable cycleloop equal 0" &
"jump SELF labelcycleloop"

variable cycleloop loop ${Ncycle} # Ncycle cycles of heating and cooling
label labelcycleloop

  variable phaseloop loop 2 # Repeats each phase (heating and cooling) with different parameters
  label labelphaseloop

    if "(${HEATING_FIRST} && ${phaseloop}==1) || (!${HEATING_FIRST} && ${phaseloop}==2)" then &
    "variable HEATING equal true # Heating -> increase particles dimensions" &
    "variable In0 equal ${In0_heat} # Overwrite the inertial number for heating phase" &
    "variable heat_cool_str string heating # For output files naming" &
    "variable Nrun equal ${Nrun_heat}" &
    "variable DTramp equal ${DTstep}" &
    "print '					HEATING, cycle $(v_cycleloop)'" &
    elif "(!${HEATING_FIRST} && ${phaseloop}==1) || (${HEATING_FIRST} && ${phaseloop}==2)" &
    "variable HEATING equal false # Cooling -> decrease particles dimensions" &
    "variable In0 equal ${In0_cool} # Overwrite the inertial number for cooling phase" &
    "variable heat_cool_str string cooling # For output files naming" &
    "variable DTramp equal -${DTstep}" &
    "variable Nrun equal ${Nrun_cool}" &
    "print '					COOLING, cycle $(v_cycleloop)'" &
    else "print 'Script Error: flag HEATING_FIRST should have value true or false and was given $(v_HEATING_FIRST)'" "quit"

    variable steploop loop $(floor(v_DTtarget/v_DTstep+0.5)) # Heating/Cooling in steps of DTstep: ramp + equilibrium
    label labelsteploop
    
      #Boundary conditions
      if "${HEATCOOL_ISO}" then "include in.PRESET_BC_control_ISO_3 # preset isotropic conditions during heating/cooling" &
      elif "!${HEATCOOL_ISO}" &
      "include in.PRESET_BC_control_HC_OEDO_3 # preset oedometric conditions with ring expansion during heating/cooling" &
      "variable logstrain equal ln(1.0+v_DTcurrent*v_lcte_ring) # Radial strain due to ring thermal expansion" &
      "variable BC_XX_TARGET equal v_logstrain #Overwrite Strain-controlled deformation in the x-direction" &
      "variable BC_YY_TARGET equal v_logstrain #Overwrite Strain-controlled deformation in the y-direction" &
      else "print 'Script Error: flag HEATCOOL_ISO should have value true or false and was given $(v_HEATCOOL_ISO)'" "quit"
      
      # Temperature variation ramp
      if "!${FIXED}" then "include in.START_BC_control_3 # Start boundary controller only if simulation not in fixed box"
      thermo_style custom step v_DTcurrent v_epsv v_pxx v_pyy v_pzz v_press v_qdev v_pxy v_pxz v_pyz v_convke v_convufr v_convfres v_convtqres
      thermo_modify warn reset # Reset warning counter to avoid "Too many warning" messages that break Pizza.py post-processing of log files
      variable DTstart equal ${DTcurrent}
      variable DTstop equal $(v_DTstart+v_DTramp)
      variable DTcurrent equal ramp(${DTstart},${DTstop})
      thermo ${Nthermo}
      run ${Nrun}
      variable DTcurrent equal ${DTstop}
      variable DTprior equal ${DTcurrent}
      if "!${FIXED}" then "include in.STOP_BC_control_3 # Stop boundary controller only if simulation not in fixed box"
      
      # Equilibrium
      if "!${FIXED}" then "include in.START_BC_control_3 # Start boundary controller only if simulation not in fixed box"
      include in.PRESET_equilibrium_all_3 # Sets equilibrium conditions on all variables
      include in.START_equilibrium_3
      thermo_style custom step v_convke v_convufr v_convfres v_convtqres v_pxx v_pyy v_pzz v_press v_qdev v_pxy v_pxz v_pyz v_pf
      thermo ${Nthermo}
      run ${Nmax} # Will be stopped at equilibrium
      if "!${FIXED}" then "include in.STOP_BC_control_3 # Stop boundary controller only if simulation not in fixed box"
      include in.STOP_equilibrium_3
      
      # Save equilibrium state at the end of the step
      if "(${HEATING} && ${SAVE_HEATING}) || (!${HEATING} && ${SAVE_COOLING})" then &
      "variable fname_write_restart string '${pathstr}/restart.after_${heat_cool_str}_cycle_${cycleloop}_step_${steploop}${suffixstr}' # Name of restart file written with absolute path" &
      "variable fname_write_dump_co string '${pathstr}/dump.co_sample_after_${heat_cool_str}_cycle_${cycleloop}_step_${steploop}${suffixstr}.lammpstrj' # Name of coordinates dump file written with absolute path" &
      "variable fname_write_dump_topo string '${pathstr}/dump.topo_sample_after_${heat_cool_str}_cycle_${cycleloop}_step_${steploop}${suffixstr}.lammpstrj' # Name of coordinates dump file written with absolute path" &
      "thermo_style custom step v_DTcurrent v_epsx v_epsy v_epsz v_epsv v_pf v_pxx v_pyy v_pzz v_press v_qdev v_pxy v_pxz v_pyz # 15 entries" &
      "dump dump_co particles custom 1 ${fname_write_dump_co} id x y z diameter" &
      "dump_modify dump_co sort id" &
      "dump dump_topo particles local 1 ${fname_write_dump_topo} c_final_geometry[*] c_final_topology[*]" &
      "log ${fname_write_log_eq} append" &
      "run 0 # To save state in log file for post-processing" &
      "log ${fname_write_log} append" &
      "undump dump_co" &
      "undump dump_topo" &
	  "write_restart ${fname_write_restart} # Save current state"
      
    next steploop
    jump SELF labelsteploop
    
    ## Degenerate case of heating or cooling only, i.e. no cycle, when Ncycle = 0
    if "${Ncycle}==0" then &
    "print 'DEGENERATE SIMULATION, MONOTONIC HEATING/COOLING ONLY: END OF SIMULATION'" &
    "quit"

  next phaseloop
  jump SELF labelphaseloop
  
next cycleloop
jump SELF labelcycleloop
